#!/bin/bash
# Check Python availability
if command -v python3 > /dev/null 2>&1; then
   python_cmd="python3"
elif command -v python > /dev/null 2>&1; then
   python_cmd="python"
else
   echo "WARNING: Python3 is not installed. Commit review functionality will not work."
   exit 1
fi
# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}
# Function to display a Tkinter message box
show_message_box() {
    local message="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
messagebox.showinfo("Genie GitHooks", '$message')
EOF
}
# Function to get user confirmation via Tkinter
get_user_confirmation() {
    local prompt="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
response = messagebox.askyesno("Genie GitHooks", "$prompt")
print("Y" if response else "N")
EOF
}
# Check if Git is installed
if ! command_exists git; then
    show_message_box " Error: Git is not installed. Please install Git before proceeding."
    exit 1
fi
# Check if Git global username and email are set
GIT_USERNAME=$(git config --global user.name)
GIT_EMAIL=$(git config --global user.email)
 
if [ -z "$GIT_USERNAME" ] || [ -z "$GIT_EMAIL" ]; then
    show_message_box ' Error: Git global username and/or email is not set.\nPlease configure them using: \n git config --global user.name "Your Name" \n git config --global user.email  "you@example.com"'
    exit 1
fi
# Define metadata file
metadata_file=".commit_metadata.json"
# Check if metadata file exists
if [[ -f "$metadata_file" ]]; then
    echo "Commit is in progress..."
    
    # Read metadata
    commit_metadata=$(cat "$metadata_file")

    # Optionally, clean up the file after processing
    rm "$metadata_file"
else
    echo "No commit metadata found."
fi
# Get commit details using Git commands
commit_id=$(git rev-parse HEAD)
default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
default_branch_commit=$(git rev-parse origin/"$default_branch")
diff_content=$(git diff --diff-filter=AM "$default_branch_commit" "$commit_id")
commit_message=$(git log --format=%B -n 1 "$commit_id")
branch=$(git rev-parse --abbrev-ref HEAD)
username=$(git config user.name)
repo_name=$(git config --get remote.origin.url | sed 's#.*/##;s/.git//')
num_files_lines_changed=$(git diff --shortstat "$default_branch_commit" "$commit_id")
files_changed=$(git diff --name-only "$default_branch_commit" "$commit_id")
# Validate diff content
if [[ -z "$diff_content" ]]; then
   diff_content="No changes detected compared to the default branch ($default_branch)"
fi
if [[ -z "$commit_message" ]]; then
   commit_message="No commit message provided"
fi
if [ -z "$files_changed" ]; then
files_changed="No files changed"
fi
if command -v python3 > /dev/null 2>&1; then
    python_cmd="python3"
elif command -v python > /dev/null 2>&1; then
    python_cmd="python"
else
    exit 1
fi
# Function to escape special characters using Python
escape_string() {
   local input="$1"
   echo "$input" | $python_cmd -c "import json, sys; print(json.dumps(sys.stdin.read()))"
}
# Escape special characters in variables
escaped_commit_message=$(escape_string "$commit_message")
escaped_diff_content=$(escape_string "$diff_content")
escaped_num_files_lines_changed=$(escape_string "$num_files_lines_changed")
escaped_files_changed=$(echo "$files_changed" | $python_cmd -c "import sys, json; print(json.dumps(sys.stdin.read().splitlines()))")
# Prepare the JSON payload
json_payload=$(cat <<EOF
{
   "diff_content": $escaped_diff_content,
   "num_files_lines_changed": $escaped_num_files_lines_changed,
   "commit_id": "$commit_id",
   "default_branch_commit": "$default_branch_commit",
   "username": "$username",
   "reponame": "$repo_name",
   "branch": "$branch",
   "commit_message": $escaped_commit_message,
   "files_changed": $escaped_files_changed,
   "user_id": "${userId}"
}
EOF
)
# Save the JSON payload to a temporary file
json_file=$(mktemp)
echo "$json_payload" > "$json_file"
# Use the BASE_API environment variable
api_url="${BASE_API}/review/commit-review"
# Use the JSON file in the curl request
response=$(curl -s -X POST -H "Content-Type: application/json" -d @"$json_file" "$api_url")
# Clean up the temporary file
rm "$json_file"
# Check if the response is received
if [[ -z "$response" ]]; then
    echo "ERROR: An unexpected error occurred while communicating with the server. Please verify your internet connection or consider the possibility of an internal server issue." >&2
    exit 1
fi
# Extract commit review details
commit_quality=$(echo "$response" | $python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('quality', ''))")
commit_remarks=$(echo "$response" | $python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('remarks', ''))")
commit_severity=$(echo "$response" | $python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('overallSeverity', ''))")
# Extract issues details using Python
issues=$(echo "$response" | $python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(json.dumps(data.get('issues', [])))")
# Prepare issue rows
issue_rows=""
index=1
while IFS= read -r issue; do
    identification=$(echo "$issue" | $python_cmd -c "import json, sys; from html import escape; print(escape(json.loads(sys.stdin.read())['identification']))")
    explanation=$(echo "$issue" | $python_cmd -c "import json, sys; from html import escape; print(escape(json.loads(sys.stdin.read())['explanation']))")
    severity=$(echo "$issue" | $python_cmd -c "import json, sys; print(json.loads(sys.stdin.read())['severity'])")
    fix=$(echo "$issue" | $python_cmd -c "import json, sys; from html import escape; print(escape(json.loads(sys.stdin.read())['fix']))")
    filename=$(echo "$issue" | $python_cmd -c "import json, sys; from html import escape; print(escape(json.loads(sys.stdin.read())['filename']))")
    issue_rows+="<tr><td class='sno'>$index</td><td class='identification'><pre>$identification</pre></td><td class='explanation'>$explanation</td><td class='severity-$severity'>$severity</td><td class='fix'><pre>$fix</pre></td><td class='files-changed';>$filename</td></tr>"
    ((index++))
done < <(echo "$issues" | $python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); [print(json.dumps(i)) for i in data]")

# Conditionally build Secrets and Disallowed Files sections
secrets_table_html=""
disallowed_files_html=""

if [[ -n "$commit_metadata" ]]; then
    # Check if secrets are enabled/true in metadata
    has_secrets=$(echo "$commit_metadata" | $python_cmd -c "import json, sys; data=json.load(sys.stdin); print(data.get('has_secrets', False))")
    if [[ "$has_secrets" == "True" || "$has_secrets" == "true" ]]; then
         secrets_table_rows=$(echo "$commit_metadata" | $python_cmd -c "import json, sys
data = json.load(sys.stdin)
secrets = data.get('secrets_found', [])
rows = []
for i, secret in enumerate(secrets, start=1):
    filename = secret.get('filename','')
    secret_content = secret.get('content','')
    rows.append(f'<tr><td class="sno">{i}</td><td class="filename">{filename}</td><td class="secret">{secret_content}</td></tr>')
print(''.join(rows))")
         if [[ -n "$secrets_table_rows" ]]; then
             secrets_table_html=$(cat <<EOF
    <div id="potentialSecretsFound">
        <h3>Potential Secrets Found:</h3>
        <table id="secretsTable">
            <tr>
                <th class="sno">S.No</th>
				<th class="filename">Filename</th>
				<th class="secret">Secret</th>
            </tr>
            $secrets_table_rows
        </table>
    </div>
EOF
)
         fi
    fi

    # Check if disallowed files exist in metadata
    has_disallowed=$(echo "$commit_metadata" | $python_cmd -c "import json, sys; data=json.load(sys.stdin); print(data.get('has_disallowed_files', False))")
    if [[ "$has_disallowed" == "True" || "$has_disallowed" == "true" ]]; then
         disallowed_files_str=$(echo "$commit_metadata" | $python_cmd -c "import json, sys
data = json.load(sys.stdin)
files = data.get('disallowed_files', [])
print(', '.join(files))")
         if [[ -n "$disallowed_files_str" ]]; then
             disallowed_files_html=$(cat <<EOF
    <div id="disallowedFilesFound">
        <h3>Disallowed Files Found:</h3>
        <table id="disallowedFilesTable">
            <tr>
                <td class="disallowed-files-str">$disallowed_files_str</td>
            </tr>
        </table>
    </div>
EOF
)
         fi
    fi
fi


# Generate an HTML file
html_file=$(mktemp --suffix=.html 2>/dev/null || mktemp -t commit_review.html)
# Add timestamp to the file name
timestamp=$(date +%s)
html_file_with_timestamp="${html_file%.html}_$timestamp.html"
cat > "$html_file_with_timestamp" <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Commit Review</title>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.4/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.4/vfs_fonts.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f2f0f0;
            color: #333;
            margin: 0;
            padding: 10px;
            box-sizing: border-box;
        }
        h2, h3 {
            color: #07439C;
        }
        .header {
            border-bottom: 1px solid #07439C;
            margin-bottom: 10px;
            padding-bottom: 5px;
        }
        .table-container {
		    width: 100vw;
            overflow-x: hidden;
        }
        table {
            width: 100%;
            max-width: 100vw;
			table-layout: fixed; 
            border-collapse: collapse;
            margin: 10px 0;
        }
        td {
            padding: 8px;
            border: 1px solid #ddd;
			overflow-x: auto;
			font-size: 13px;
        }
        th {
            background-color: #07439C;
            color: white;
			padding: 8px;
            border: 1px solid #ddd;
			overflow-x: auto;
        } 			
		th.sno { 
		    width: 3%; 
			min-width: 50px; 
		}
		td.sno {
		    text-align: center; 
		}
        th.filename {
		    width: 20%; 
			min-width: 200px; 
			word-break: break-word; 
		}
		td.filename {
		   text-align: center; 
		   overflow-x: auto;
		}
		th.secret{ 
		    width: 60%; 
			min-width: 400px; 
			word-break: break-word; 
		}	
        td.secret{
            word-break: break-word; 
			white-space: pre-wrap; 
			text-align: left;
        }			
		th.disallowed-files {
     		width: 20%; 
			min-width: 500px; 
			word-break: break-word; 
			white-space: pre-wrap; 
		}
		td.disallowed-files-str {
		    word-break: break-word; 
			white-space: pre-wrap; 
			text-align: left; 
			}
		th.quality { 
		    width: 15%; 
			min-width: 150px; 
			word-break: break-word;
            text-align: center;			
		}
		td.quality {
            text-align: center;	
			vertical-align: top;
		}
		th.remarks { 
		    width: 70%; 
			min-width: 300px; 
		}
		td.remarks {
		    word-break: break-word; 
			white-space: pre-wrap; 
			text-align: left;
        }			
		th.overall-severity { 
		    width: 15%; 
			min-width: 150px; 
			text-align: center; 
		}
		td.overall-severity {
		    text-align: center;	
			vertical-align: top;
		}
		th.identification { 
		    width: 22%; 
			min-width: 150px; 
			white-space: pre-wrap;
		}
		td.identification {
		    text-align: left;
			overflow-x: auto;
			font-family: 'Poppins', sans-serif;
		}
		th.explanation, td.explanation { 
		    width: 30%; 
			min-width: 250px; 
			word-break: break-word; 
			white-space: pre-wrap; }
		th.severity{ 
		    width: 13%; 
			min-width: 80px; 
			text-align: center; 
		}
		td[class^="severity-"] {
			text-align: center;
		}
		th.fix{ 
		    width: 20%; min-width: 200px; white-space: pre-wrap; 
		}
		td.fix {
		    text-align: left;
			overflow-x: auto;
			font-family: 'Poppins', sans-serif;
		}
		th.files-changed { 
		    width: 12%; 
			min-width: 150px; 
			word-break: break-word; 
		}
		td.files-changed {
		    text-align: center; 
		}
        .severity-critical {
            color: red;
        }
        .severity-minor {
            color: orange;
        }
        .severity-major {
            color: red;
        }
        .severity-cosmetic {
            color: blue;
        }
        button.download-btn {
            padding: 5px 10px;
            background-color: #07439C !important;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button.download-btn:hover {
            background-color: #035f99 !important;
        }
</style>
</head>
<body>
<div class="header">
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
	  <div>
        <h2>Commit Review</h2> 
	  </div>
	  <div>
		<button id="downloadButton" class="download-btn">Download as PDF</button>              
	  </div>  		
    </div> 
</div>	
<div id="content">  
        $secrets_table_html
        $disallowed_files_html
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <div>
                <h3>Summary:</h3>
            </div>        
        </div>      
<table id="summaryTable">
    <tr>
        <th class="quality">Quality</th>
        <th class="remarks">Remarks</th>
        <th class="overall-severity">Overall Severity</th>
    </tr>
    <tr>
        <td class="quality">$commit_quality</td>
        <td>$commit_remarks</td>
        <td class="overall-severity">$commit_severity</td>
    </tr>
</table>
<div id="content">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <div>
                <h3>Issues Identified:</h3>
            </div>        
</div>
<table id="issuesTable">
    <tr>
        <th class="sno">S.No</th>
        <th class="identification">Identification</th>
        <th class="explanation">Explanation</th>
        <th class="severity">Severity</th>
        <th class="fix">Suggested Fix</th>
        <th class="files-changed">Files Changed</th>
    </tr>
    $issue_rows
</table>
<script>
document.getElementById("downloadButton").addEventListener("click", () => {
    // Get summary table data by ID
    const summaryTable = document.getElementById("summaryTable");
    if (!summaryTable) {
        return;
    }
    const summaryRow = summaryTable.querySelector("tr:nth-child(2)");
    const summaryCells = summaryRow.querySelectorAll("td");
    const summaryData = {
         quality: summaryCells[0]?.innerText || "",
         remarks: summaryCells[1]?.innerText || "",
         severity: summaryCells[2]?.innerText || ""
    };
    // Get issues table data by ID
    const issuesTable = document.getElementById("issuesTable");
    if (!issuesTable) {
        return;
    }
    const issueRows = issuesTable.querySelectorAll("tr:not(:first-child)");
    const issues = Array.from(issueRows).map((row, index) => {
        const cells = row.querySelectorAll("td");
        return {
            identification: cells[1]?.innerText || "",
            explanation: cells[2]?.innerText || "",
            severity: cells[3]?.innerText || "",
            fix: cells[4]?.innerText || "",
            filename: cells[5]?.innerText || "",
            index: index + 1
        };
    });
    // Optionally get secrets table data if it exists
    let secretsContent = "";
    const secretsTable = document.getElementById("secretsTable");
    if (secretsTable) {
        const secretRows = secretsTable.querySelectorAll("tr:not(:first-child)");
        secretsContent = Array.from(secretRows).map((row, index) => {
            const cells = row.querySelectorAll("td");
            return {
                sno: cells[0]?.innerText || "",
                filename: cells[1]?.innerText || "",
                secret: cells[2]?.innerText || ""
            };
        });
    } else {
    }
    // Optionally get disallowed files data if it exists
    let disallowedFilesContent = "";
    const disallowedFilesTable = document.getElementById("disallowedFilesTable");
    if (disallowedFilesTable) {
        const row = disallowedFilesTable.querySelector("tr");
        if (row) {
            const td = row.querySelector("td");
            if (td) {
                disallowedFilesContent = td.innerText;
            }
        }
    } else {
    }
    // Create file name using current date
    const currentDate = new Date();
    const formattedDate = currentDate.toLocaleDateString('en-GB', {
        day: '2-digit', month: 'short', year: 'numeric'
    }).replace(' ', '_').replace(',', '');
    const fileName = 'commit_review_' + formattedDate + '.pdf';
    // Create the PDF document definition
    const docDefinition = {
        pageOrientation: 'landscape',
        content: [
            { text: 'Commit Review', style: 'header' },
            // Optional Secrets Section
            ...(secretsContent.length ? [{
                text: 'Potential Secrets Found:',
                style: 'subheader'
            },
            {
                table: {
                    headerRows: 1,
                    widths: ['10%', '45%', '45%'],
                    body: [
                        [
                            { text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Filename', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Secret', fillColor: '#E9E5E5', bold: true, alignment: 'center' }
                        ],
                        ...secretsContent.map(secret => [
                            { text: secret.sno, alignment: 'center' },
                            { text: secret.filename ,alignment: 'center'},
                            { text: secret.secret }
                        ])
                    ]
                }
            }] : []),
            // Optional Disallowed Files Section
            ...(disallowedFilesContent ? [{
                text: 'Disallowed Files Found:',
                style: 'subheader'
            },
            {
                table: {
                    widths: ['100%'],
                    body: [
                        [
                             { text: disallowedFilesContent, margin: [0, 5, 0, 5] }
                        ]
                    ]
                }
            }] : []),
            // Summary Section
            { text: 'Summary:', style: 'subheader' },
            {
                table: {
                    widths: ['25%', '50%', '25%'],
                    body: [
                        [
                            { text: 'Quality', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Remarks', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Overall Severity', fillColor: '#E9E5E5', bold: true, alignment: 'center' }
                        ],
                        [
                            { text: summaryData.quality, alignment: 'center' },
                            { text: summaryData.remarks },
                            { text: summaryData.severity, alignment: 'center' }
                        ]
                    ]
                }
            },
            // Issues Section
            { text: 'Issues Identified:', style: 'subheader' },
            {
                table: {
                    headerRows: 1,
                    widths: ['5%', '20%', '30%', '10%', '25%', '10%'],
                    body: [
                        [
                            { text: 'S.No', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Identification', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Explanation', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Severity', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Suggested Fix', fillColor: '#E9E5E5', bold: true, alignment: 'center' },
                            { text: 'Files Changed', fillColor: '#E9E5E5', bold: true, alignment: 'center' }
                        ],
                        ...issues.map((issue, index) => [
                            { text: index + 1, fontSize: 10, alignment: 'center' },
                            { text: issue.identification, fontSize: 10 },
                            { text: issue.explanation, fontSize: 10 },
                            { text: issue.severity, fontSize: 10, alignment: 'center' },
                            { text: issue.fix, fontSize: 10 },
                            { text: issue.filename, alignment: 'center', fontSize: 10 }
                        ])
                    ]
                }
            }
        ],
        styles: {
            header: {
                fontSize: 18,
                bold: true,
                alignment: 'center',
                margin: [0, 0, 0, 10]
            },
            subheader: {
                fontSize: 14,
                bold: true,
                margin: [0, 10, 0, 5]
            }
        }
    };
    // Generate and download the PDF using pdfMake
    pdfMake.createPdf(docDefinition).download(fileName, () => {
    });
});
</script>
</body>
</html>
EOF
# Open the HTML file in the default browser and bring it to the foreground
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    xdg-open "$html_file_with_timestamp"
    sleep 1  
    wmctrl -a "$(basename "$html_file")" 2>/dev/null || echo "Switch manually."
elif [[ "$OSTYPE" == "darwin"* ]]; then
    open "$html_file_with_timestamp"
    sleep 1  
    osascript -e 'tell application "Google Chrome" to activate' 2>/dev/null ||     osascript -e 'tell application "Safari" to activate' 2>/dev/null ||     echo "Switch manually."
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    start "" "$html_file_with_timestamp"
    sleep 1  
else
    echo "Unsupported OS. Open the file manually: $html_file"
fi  
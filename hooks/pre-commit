#!/bin/bash
 
# Global pre-commit hook to check for Python installation
 
if command -v python3 > /dev/null 2>&1; then
   python_cmd="python3"
elif command -v python > /dev/null 2>&1; then
   python_cmd="python"
else
   echo "WARNING: Python3 is not installed. Commit review functionality will not work." >&2
   exit 1
fi

# Get staged files
staged_files=$(git diff $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') --cached --name-only)
diff_content=$(git diff $(git rev-parse --abbrev-ref origin/HEAD | sed 's@^origin/@@') --cached)
repo_name=$(git config --get remote.origin.url | sed 's#.*/##;s/.git//')
 
if [[ -z "$staged_files" ]]; then
    echo "No files staged for commit."
    exit 0
fi
 
# Convert staged files to JSON array
staged_files_json=$(printf '%s\n' "$staged_files" | sed 's/^/"/; s/$/"/' | paste -sd, - | sed 's/^/[/' | sed 's/$/]/')
 
 
# Escape diff content properly for JSON
if command -v python3 > /dev/null 2>&1; then
    escaped_diff_content=$(printf '%s' "$diff_content" | python3 -c "import json, sys; print(json.dumps(sys.stdin.read()))")
elif command -v python > /dev/null 2>&1; then
    escaped_diff_content=$(printf '%s' "$diff_content" | python -c "import json, sys; print(json.dumps(sys.stdin.read()))")
fi
 
# Prepare the JSON payload
json_payload=$(cat <<EOF
{
    "staged_files": $staged_files_json,
    "diff_content": $escaped_diff_content,
    "reponame": "$repo_name",
    "user_id": "${userId}"
}
EOF
)
 
api_url="${BASE_API}/review/commit-scan"
 
# Save the JSON payload to a temporary file
json_file=$(mktemp)
echo "$json_payload" > "$json_file"
 
 
# Send the JSON payload to the API from the temporary file
response=$(curl -s -X POST -H "Content-Type: application/json" -d @"$json_file" "$api_url")
 
# Clean up the temporary file
rm "$json_file"
 
# Check if the response is received
if [[ -z "$response" ]]; then
    echo "ERROR: An unexpected error occurred while communicating with the server. Please verify your internet connection or consider the possibility of an internal server issue." >&2
    exit 1
fi
 
# Extract values from the raw response using the selected Python interpreter
has_secrets=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('has_secrets', 'false'))" <<< "$response")
has_disallowed_files=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('has_disallowed_files', 'false'))" <<< "$response")
files_disallowed=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(', '.join(data.get('files_disallowed', [])))" <<< "$response")
list_secrets_found=$($python_cmd -c "
import json, sys
data = json.loads(sys.stdin.read())
secrets = [
    f\"{item['filename']} - Pattern: {item['pattern']} - Entropy: High - Line: {item['line_num']} - Content: {item['line_content']}\"
    for item in data.get('list_secrets_found', [])
]
print('\n'.join(secrets))
" <<< "$response")
 
 
 
# Convert boolean values to numeric (0 for false, 1 for true)
secrets_found_num=$([[ "$has_secrets" == "true" ]] && echo 1 || echo 0)
disallowed_files_found_num=$([[ "$has_disallowed_files" == "true" ]] && echo 1 || echo 0)
# Abort commit if any disallowed files are detected
if [[ "$has_disallowed_files" == "True" ]]; then
    echo -e "Commit aborted due to disallowed files detected."
    echo -e "The following disallowed files were detected:"
    echo -e "$files_disallowed"
    exit 1
fi
# Handle secrets detection
if [[ "$has_secrets" == "True" ]]; then
    echo -e "Secrets were detected in the staged files."
    if [[ -n "$list_secrets_found" ]]; then
        echo -e "The following secrets were found in the diff content:"
        echo -e "$list_secrets_found"
    fi
    # Ask the user to confirm the commit despite secrets, only once
    echo -n "Do you want to proceed with the commit despite the detected secrets? (Y/N): "
    read user_input < /dev/tty
    case "$user_input" in
        [Yy]*)
            echo "Proceeding with commit."
            ;;
        [Nn]*)
            echo "Commit aborted by user."
            exit 1
            ;;
        *)
            echo "Invalid input. Commit aborted."
            exit 1
            ;;
    esac
fi
exit 0
 
#!/bin/bash
 
# Check Python availability
if command -v python3 > /dev/null 2>&1; then
   python_cmd="python3"
elif command -v python > /dev/null 2>&1; then
   python_cmd="python"
else
   echo "WARNING: Python3 is not installed. Commit review functionality will not work."
   exit 1
fi
 
# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}
 
# Function to display a Tkinter message box
show_message_box() {
    local message="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
messagebox.showinfo("Genie GitHooks", '$message')
EOF
}
 
# Function to get user confirmation via Tkinter
get_user_confirmation() {
    local prompt="$1"
    $python_cmd - <<EOF
import tkinter as tk
from tkinter import messagebox
root = tk.Tk()
root.withdraw()
response = messagebox.askyesno("Genie GitHooks", "$prompt")
print("Y" if response else "N")
EOF
}
 
# Check if Git is installed
if ! command_exists git; then
    show_message_box " Error: Git is not installed. Please install Git before proceeding."
    exit 1
fi
 
# Check if Git global username and email are set
GIT_USERNAME=$(git config --global user.name)
GIT_EMAIL=$(git config --global user.email)
 
if [ -z "$GIT_USERNAME" ] || [ -z "$GIT_EMAIL" ]; then
    show_message_box ' Error: Git global username and/or email is not set.\nPlease configure them using: \n git config --global user.name "Your Name" \n git config --global user.email  "you@example.com"'
    exit 1
fi
 
# Get staged files
staged_files=$(git diff --cached --name-only)
diff_content=$(git diff --cached)
repo_name=$(git config --get remote.origin.url | sed 's#.*/##;s/.git//')
 
if [[ -z "$staged_files" ]]; then
    show_message_box "No files staged for commit."
    exit 0
fi
 
# Convert staged files to JSON
staged_files_json=$(printf '%s\n' "$staged_files" | sed 's/^/"/; s/$/"/' | paste -sd, - | sed 's/^/[/' | sed 's/$/]/')
escaped_diff_content=$(printf '%s' "$diff_content" | $python_cmd -c "import json, sys; print(json.dumps(sys.stdin.read()))")
 
# Prepare JSON payload
json_payload=$(cat <<EOF
{
    "staged_files": $staged_files_json,
    "diff_content": $escaped_diff_content,
    "reponame": "$repo_name",
    "user_id": "${userId}"
}
EOF
)
 
api_url="${BASE_API}/review/commit-scan"
json_file=$(mktemp)
echo "$json_payload" > "$json_file"
response=$(curl -s -X POST -H "Content-Type: application/json" -d @"$json_file" "$api_url")
rm "$json_file"
 
# Check response
if [ -z "$response" ] || [[ "$response" == *'"detail":"Not Found"'* ]]; then
    show_message_box "ERROR: Unable to communicate with the server. Check internet connection or server status."
    exit 1
fi
 
# Parse API response
has_secrets=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('has_secrets', 'false'))" <<< "$response")
has_disallowed_files=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(data.get('has_disallowed_files', 'false'))" <<< "$response")
files_disallowed=$($python_cmd -c "import json, sys; data = json.loads(sys.stdin.read()); print(', '.join(data.get('files_disallowed', [])))" <<< "$response")
list_secrets_found=$($python_cmd -c "
import json, sys
 
data = json.loads(sys.stdin.read())
 
secrets = [
    '\\n'.join([
        '-' * 30,
        f'File: {item[\"filename\"]}',
        f'Pattern: Potential Secret',
        f'Content: {item[\"line_content\"]}'
    ])
    for item in data.get('list_secrets_found', [])
]
 
print('\\n'.join(secrets))
" <<< "$response")
 
# Convert the boolean values to lowercase for consistent comparison
has_secrets=$(echo "$has_secrets" | tr '[:upper:]' '[:lower:]')
has_disallowed_files=$(echo "$has_disallowed_files" | tr '[:upper:]' '[:lower:]')
 
# Handle disallowed files
if [[ "$has_disallowed_files" == "true" ]]; then
    user_input=$(get_user_confirmation "Disallowed files detected: \n$files_disallowed\nDo you want to proceed?")
    if [[ "$user_input" != "Y" ]]; then
        show_message_box "Commit aborted by user."
        exit 1
    fi
fi
 
# Handle secrets detection
if [[ "$has_secrets" == "true" ]]; then
    escaped_secrets=$(echo "$list_secrets_found" | sed ':a;N;$!ba;s/\\/\\\\/g; s/"/\\"/g; s/\n/\\n/g')
    user_input=$(get_user_confirmation "Secrets detected in staged files!\n$escaped_secrets  \nDo you want to proceed anyway?")
    if [[ "$user_input" != "Y" ]]; then
        show_message_box "Commit aborted by user."
        exit 1
    fi
fi
 
exit 0
 
 
